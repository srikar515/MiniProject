# Generated by Django 2.2.1 on 2019-05-03 11:09

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import multiselectfield.db.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Guide_Registration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=10)),
                ('last_name', models.CharField(max_length=10)),
                ('user_name', models.CharField(max_length=12, unique=True)),
                ('email_id', models.EmailField(max_length=255)),
                ('pass_word', models.CharField(max_length=20)),
                ('gender', models.CharField(blank=True, max_length=7)),
                ('native_place', models.CharField(blank=True, max_length=25)),
                ('phone_number', models.CharField(default='', max_length=10, unique=True)),
                ('age', models.CharField(max_length=2)),
                ('Address', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Tourist_Registration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=10)),
                ('last_name', models.CharField(max_length=10)),
                ('user_name', models.CharField(max_length=12, unique=True)),
                ('email_id', models.EmailField(max_length=255)),
                ('pass_word', models.CharField(max_length=20)),
                ('language', models.CharField(max_length=10)),
                ('gender', models.CharField(max_length=7)),
                ('phone_number', models.CharField(default='', max_length=10, unique=True)),
                ('age', models.CharField(blank=True, max_length=2)),
            ],
        ),
        migrations.CreateModel(
            name='language_Selection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('languages_select', multiselectfield.db.fields.MultiSelectField(choices=[('Telugu', 'Telugu'), ('Hindi', 'Hindi'), ('English', 'English'), ('Spanish', 'Spanish')], max_length=100)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='testapp.Guide_Registration')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_tourist', models.BooleanField(default=False)),
                ('is_guide', models.BooleanField(default=False)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Guide_Booking_Model',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_field', models.DateField(max_length=20)),
                ('guide_username', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='testapp.Guide_Registration')),
                ('tourist_username', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='testapp.Tourist_Registration')),
            ],
            options={
                'unique_together': {('guide_username', 'date_field')},
            },
        ),
    ]
